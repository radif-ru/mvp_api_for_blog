"""
Django settings for mvp_api_for_blog project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from collections import namedtuple
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Переменные окружения.
# Использую для локального запуска вне докер контейнера для работы с дебагером
# Pycharm, в прод переменные окружения подгружает docker-compose
environment_variables = os.path.join(BASE_DIR, '../.loc.env')
if os.path.exists(environment_variables):
    load_dotenv(environment_variables)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', default='yp@cq+i8hq^nta7i_)a-')

# SECURITY WARNING: don't run with debug turned on in production!
# Режим дебага из настроек переменных окружения, иначе из default
DEBUG = int(os.environ.get('DEBUG', default=1))

# Разрешённые хосты из настроек переменных окружения, иначе из default
ALLOWED_HOSTS = [*os.environ.get('ALLOWED_HOSTS', default='*').split(' ')]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'users.apps.UsersConfig',
    'blog.apps.BlogConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get(
            'SQL_ENGINE', default='django.db.backends.sqlite3'),
        'NAME': os.environ.get(
            'SQL_DATABASE', default=os.path.join(BASE_DIR, 'db.sqlite3')),
        'USER': os.environ.get('SQL_USER', default='user'),
        'PASSWORD': os.environ.get('SQL_PASSWORD', default='password'),
        'HOST': os.environ.get('SQL_HOST', default='localhost'),
        'PORT': os.environ.get('SQL_PORT', default='5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-Ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles', )

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')
IMAGES_UPLOAD_DIRECTORY = 'upload_images'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

JSON_PATH = 'json'

RESPONSE_MESSAGES = namedtuple('RESPONSE_STATUSES',
                               ('success', 'no_success', 'no_required_fields', 'forbidden_act', 'not_found',
                                'incorrect_data', 'no_token', 'not_valid_token'))
RESPONSE_MESSAGES.success = 'success'
RESPONSE_MESSAGES.no_success = 'no success'
RESPONSE_MESSAGES.no_required_fields = 'no_required_fields'
RESPONSE_MESSAGES.forbidden_act = 'forbidden act'
RESPONSE_MESSAGES.not_found = 'not found'
RESPONSE_MESSAGES.incorrect_data = 'incorrect data'
RESPONSE_MESSAGES.no_token = 'no token'
RESPONSE_MESSAGES.not_valid_token = 'not valid token'
